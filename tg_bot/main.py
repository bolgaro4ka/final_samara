
import os
from datetime import datetime
import logging
from stt import STT
import asyncio
from aiogram.filters.command import Command
import g4f
import json
import pyaudio
from vosk import Model, KaldiRecognizer
from keyboards import *
from pathlib import Path
stt = STT()

with open('users.json', encoding='utf-8') as f:
    users = json.load(f)

with open('requests.json', encoding='utf-8') as f:
    req = json.load(f)

with open('questions.json', encoding='utf-8') as f:
    questions = json.load(f)


model = Model(r'vosk/ru')
rec = KaldiRecognizer(model, 16000)
p = pyaudio.PyAudio()
stream = p.open(format=pyaudio.paInt16, channels=1, rate=16000, input=True, frames_per_buffer=8000)
stream.start_stream()



def recognize_speak():
    while True:
        data = stream.read(120000)
        rec.AcceptWaveform(data)
        x=json.loads(rec.Result())
        if x["text"] == "":
            continue
        else:
            return x["text"]


HELP_STR = '''/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/id - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID
/message –°–û–û–ë–©–ï–ù–ò–ï - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–∞—á—É

/temp <–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê_–û–¢–í–ï–¢–ê> - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ (–æ—Ç 0.01 –¥–æ 2)
/models - –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å (GPT)

/help - –ü–æ–º–æ—â—å
/number_message - –ù–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
/time - –í—Ä–µ–º—è
/ping - Pong
'''



bot = Bot(token="YOUR TOKEN")
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()
rt = Router()




@dp.message(Command("time"))
async def time(msg: types.Message):
    await bot.send_message(msg.from_user.id, f"‚åõ –í—Ä–µ–º—è: {str(datetime.now())[:]}")

###### ADMINS ##############
@dp.message(Command("off"))
async def time(msg: types.Message):
    if users['users'][str(msg.from_user.id)]['admin']:
        with open('users.json', 'w', encoding='utf-8') as f:
            f.write(json.dumps(users, ensure_ascii=False))
        await bot.send_message(msg.from_user.id, f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ!")
        with open('requests.json', 'w', encoding='utf-8') as f:
            f.write(json.dumps(req, ensure_ascii=False))
        await bot.send_message(msg.from_user.id, f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ!")
        with open('questions.json', 'w', encoding='utf-8') as f:
            f.write(json.dumps(questions, ensure_ascii=False))
        await bot.send_message(msg.from_user.id, f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ!")
    else: await bot.send_message(msg.from_user.id, f"–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ!")


@dp.message(Command("message"))
async def time(msg: types.Message):
    print(str(msg.text))
    questions['que'][str(msg.from_user.id)].append(' '.join(str(msg.text).split(' ')[1:]))
    await bot.send_message(msg.from_user.id, '–í–∞—à–µ–º—É –≤—Ä–∞—á—É'+" –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "+ ' '.join(str(msg.text).split(' ')[1:]))

######### ADDITIONAL #######################
@dp.message(Command("start"))
async def start(msg: types.Message):
    await bot.send_message(msg.from_user.id, (f"üëã –ü—Ä–∏–≤–µ—Ç {msg.from_user.full_name}! –≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –ú–µ–¥–ì–æ—Å —Å –ø–æ–º–æ—â—å—é –µ–≥–æ —Ç—ã –º–æ–∂–µ—à—å —Å–ø–∏—Å–∞—Ç—å—Å—è —Å –≤—Ä–∞—á—ë–º, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ChatGPT!"))

    if not str(msg.from_user.id) in users['users']:
        users['users'][str(msg.from_user.id)] = {"user_full_name":  msg.from_user.full_name, "username": msg.from_user.username, "model": "gpt-3.5-turbo-16k", "temp": 0.7, "admin": False, "msg_left": 10, "msg_used": 0, "mode": ""}
        print('–ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨!', '|', msg.from_user.id, '|', msg.from_user.full_name, '|', msg.from_user.username)
    else: print('–ù–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    if not str(msg.from_user.id) in req['req']:
        req['req'][str(msg.from_user.id)] = []
        print('–ù–û–í–´–ô –ë–ê–ó–ê –î–ê–ù–ù–´–•!', '|', msg.from_user.id, '|', msg.from_user.full_name, '|', msg.from_user.username)
    if not str(msg.from_user.id) in questions['que']:
        questions['que'][str(msg.from_user.id)] = []
        print('–ù–û–í–´–ô –ë–ê–ó–ê –î–ê–ù–ù–´–•!', '|', msg.from_user.id, '|', msg.from_user.full_name, '|', msg.from_user.username)
    else: print('–ù–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–Ω–æ, –æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')


@dp.message(Command("id"))
async def help(msg: types.Message):
    await bot.send_message(msg.from_user.id, 'ü™™ –í–∞—à ID: '+str(msg.from_user.id))

@dp.message(Command("help"))
async def help(msg: types.Message):
    await bot.send_message(msg.from_user.id, HELP_STR)

@dp.message(Command("ping"))
async def pong(msg: types.Message):
    await bot.send_message(msg.from_user.id, "‚ö™ pong")

@dp.message(Command("temp"))
async def number_message(msg: types.Message):
    users['users'][msg.from_user.id]['temp'] = float(str(msg.text).split(' ')[1])
    await bot.send_message(msg.from_user.id, f"*üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ {users[str(msg.from_user.id)]['temp']}\!*", parse_mode='MarkdownV2')

@dp.message(Command("models"))
async def output(message: types.Message):
    await message.answer(
        f"üßä –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –º–æ–¥–µ–ª–µ–π:",
        reply_markup=get_keyboard_mini_models()
    )


@dp.message(Command("whoiam"))
async def whoiam(msg: types.Message):
    text = f"üëÄ –¢–≤–æ–µ –∏–º—è: {msg.from_user.full_name}, —Ç–≤–æ–π –Ω–∏–∫: {msg.from_user.username}"
    await bot.send_message(msg.from_user.id, text)

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    await bot.send_message(message.from_user.id, "–ò–∑–æ–±–∞—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –≤—Ä–∞—á —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏")
@dp.message()
async def echo(msg: types.Message):
    if msg.content_type == types.ContentType.VOICE or msg.content_type == types.ContentType.AUDIO or msg.content_type == types.ContentType.DOCUMENT:
        if msg.content_type == types.ContentType.VOICE:
            file_id = msg.voice.file_id
        elif msg.content_type == types.ContentType.AUDIO:
            file_id = msg.audio.file_id
        elif msg.content_type == types.ContentType.DOCUMENT:
            file_id = msg.document.file_id
        else:
            await msg.reply("–§–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_on_disk = Path("", f"{file_id}.tmp")
        await bot.download_file(file_path, destination=file_on_disk)

        text = stt.audio_to_text(file_on_disk)
        if not text:
            text = "üò¢ –§–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
            return
        os.remove(file_on_disk)  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    else: text=''
    if text: uni_text=text
    else: uni_text=msg.text
    temp = await msg.reply( f"‚è∞ –°–µ–π—á–∞—Å –ø–æ–¥—É–º–∞—é! ({users['users'][str(msg.from_user.id)]['model']})")
    if users["users"][str(msg.from_user.id)]['mode']:
        try:
            response = await g4f.ChatCompletion.create_async(model=users['users'][str(msg.from_user.id)]['model'],
                                                                     messages=[{"role": "user",
                                                                                "content": uni_text}],
                                                                     tempetarure=users['users'][str(msg.from_user.id)]['temp'])

        except RuntimeError: await bot.send_message(msg.from_user.id, 'üò¢ –ü–æ—Ö–æ–∂–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å')
    else:
        response = await g4f.ChatCompletion.create_async(model=users['users'][str(msg.from_user.id)]['model'], messages=[{"role": "user", "content": uni_text}], tempetarure=users['users'][str(msg.from_user.id)]['temp'])
    if not 'username' in users['users'][str(msg.from_user.id)]:
        users['users'][str(msg.from_user.id)]['username'] = msg.from_user.username
        users['users'][str(msg.from_user.id)]['user_full_name'] = msg.from_user.full_name

    req['req'][str(msg.from_user.id)].append({uni_text: response})
    await temp.delete()
    await msg.reply(response)







@dp.callback_query(F.data == 'back')
async def set_model_gpt3(callback: types.CallbackQuery):
    await callback.message.delete()


@dp.callback_query(F.data == "gpt-3.5-turbo-16k")
async def set_model_gpt3(callback: types.CallbackQuery):
    print(callback.from_user.id)
    users['users'][str(callback.from_user.id)]['model'] = "gpt-3.5-turbo-16k"
    await callback.message.delete()
    await callback.answer(
        text=f'üßä –ú–æ–¥–µ–ª—å gpt-3.5-turbo-16k —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!',
        show_alert=True)

@dp.callback_query(F.data == "gpt-3.5-turbo-16k-0613")
async def set_model_gpt3(callback: types.CallbackQuery):
    users['users'][str(callback.from_user.id)]['model'] = "gpt-3.5-turbo-16k-0613"
    print(callback.from_user.id)
    await callback.message.delete()
    await callback.answer(
        text=f'üßä –ú–æ–¥–µ–ª—å gpt-3.5-turbo-16k-0613 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!',
        show_alert=True)

@dp.callback_query(F.data == "gpt-4-0613")
async def set_model_gpt3(callback: types.CallbackQuery):
    users['users'][str(callback.from_user.id)]['model'] = "gpt-4-0613"
    print(callback.from_user.id)
    await callback.message.delete()
    await callback.answer(
        text=f'üßä –ú–æ–¥–µ–ª—å gpt-4-0613 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!',
        show_alert=True)

@dp.callback_query(F.data == "cancel")
async def set_model_gpt3(callback: types.CallbackQuery):
    await callback.message.delete()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())